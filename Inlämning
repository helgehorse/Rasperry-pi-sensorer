#!/usr/bin/python

import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO
import time
import json
import threading


MQTT_BROKER = "192.168.50.185"
topic_start_measurement = "obj/smhi/63590/21"
topic_read = "obj/tuc/ultrasonic"
topic_regn = "set/tuc/regn"


TRIG = 26
ECHO = 19
RAIN_SENSOR_PIN = 12


GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(RAIN_SENSOR_PIN, GPIO.IN)


client = mqtt.Client()
client.connect(MQTT_BROKER, 1883, 60)

measurement_active = False


def measure_distance():
    GPIO.output(TRIG, GPIO.LOW)
    time.sleep(0.5)
    GPIO.output(TRIG, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(TRIG, GPIO.LOW)

    while GPIO.input(ECHO) == GPIO.LOW:
        pulse_start = time.time()

    while GPIO.input(ECHO) == GPIO.HIGH:
        pulse_end = time.time()

    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150
    return round(distance, 2)


def read_rain_sensor():
    raw_value = GPIO.input(RAIN_SENSOR_PIN)
    if raw_value == GPIO.LOW:
        return {"rain_detected": 1, "status": "Det regnar!", "image": "üåßÔ∏è"}
    else:
        return {"rain_detected": 0, "status": "Inget regn.", "image": "‚òÄÔ∏è"}


def on_message(client, userdata, message):
    global measurement_active
    payload = json.loads(message.payload)

    if message.topic == topic_start_measurement:
        if payload.get("value", 0) > 20:
            print("M√§tning startad...")
            measurement_active = True
        else:
            print("M√§tning stoppad.")
            measurement_active = False


def continuous_measurement():
    global measurement_active
    while True:
        if measurement_active:
            distance = measure_distance()
            regn_status = read_rain_sensor()

            print(f"Avst√•nd: {distance} cm | Status: {regn_status['status']} {regn_status['image']}")


            client.publish(topic_read, json.dumps({"value": distance, "timestamp": time.time()}))


            message = json.dumps(regn_status, ensure_ascii=False)
            client.publish(topic_regn, message)

            time.sleep(30)
        else:
            time.sleep(1)


measurement_thread = threading.Thread(target=continuous_measurement)
measurement_thread.daemon = True
measurement_thread.start()


print("Subscribing to topic:", topic_start_measurement)
client.subscribe(topic_start_measurement)
client.on_message = on_message
client.loop_forever()
